/********************
 * Name: Sam Leal 
 * Date: 07/28/2023 
 * Description: A Collatz sequence is generated by repeatedly applying the 
 * following rules to an integer and then to each resulting integer in turn: 
 *  If even: divide by 2. 
 *  If odd: multiply by 3, then add 1. 
 * The Collatz algorithm has been tested and found to always reach 1 for all 
 * positive integers. Create a function that, when given two positive integers 
 * a b, returns the string "a" if integer a took fewer steps to reach 1 than b 
 * when passed through the Collatz sequence, or "b" if integer b took fewer 
 * steps to reach 1 than a. 
 */
public class CollatzConjecture
{

    public static void Main(String[] args)
    {
        Solution(); 
    }

    public static void Solution()
    {

        // declare variables 
        int a, b; 

        // get user input 
        Console.Write("Please enter a value for a: "); 
        a = int.Parse(Console.ReadLine());

        // prompt the user for b 
        Console.Write("Please enter a value for b: ");
        b = int.Parse(Console.ReadLine());

        // collatz a, b 
        Console.WriteLine(Collatz(a, b));
        Console.ReadLine(); 

    }

    // returns the number of steps taken to collatz the number 
    public static int Collatz(int num)
    {

        // declare variables 
        int x, steps;

        // initialize variables 
        steps = 0;

        // save x for output later 
        x = num; 

        // collatz while loop 
        while (num > 1)
        {

            /******************************************
            *  rules: 
            *    if even: divide by 2. 
            *    if odd: multiply by 3, then add 1. 
            *****************************************/
            if (num % 2 == 0)
            {
                // even
                num /= 2;
            }
            else
            {
                // odd
                num = (num * 3) + 1;
            }

            // increment number of steps 
            steps++;

        }

        // prints the number of steps taken to collatz the number 
        Console.WriteLine("Number of steps to Collatz " + x + ": " + steps);

        // returns the number of steps taken 
        return steps;

    }

    // returns either "a" or "b" depending on which number took fewer steps
    public static string Collatz(int a, int b)
    {
        return Collatz(a) < Collatz(b) ? "a" : "b"; 
    }

}
